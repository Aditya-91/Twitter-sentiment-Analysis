# import libraries

import tweepy
from textblob import TextBlob
from wordcloud import WordCloud
import json
import csv
import re
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

# Get all tweets 

consumer_key = xxx
consumer_secret = xxx
access_token = xxx
access_token_secret = xxx
hashtag_phrase = input("Enter the keyword: ") 

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)    

api = tweepy.API(auth)

post = tweepy.Cursor(api.search, q=hashtag_phrase+' -filter:retweets', lang="en", tweet_mode='extended')

# Create a dataframe for the tweets
df = pd.DataFrame( [tweet.full_text for tweet in post.items(100)], columns=['Tweets'])
df.head(10)

# clean the text
def cleanTxt(text):
    text = re.sub(r'@[A-Za-z0-9]+','', text)
    text = re.sub(r'#','', text)
    text = re.sub(r'RT[\s]','', text)
    text = re.sub(r'https?:\/\/\S+','', text)
    return text
 
# show clean text
df['Tweets'] = df['Tweets'].apply(cleanTxt)
df.head()

# create a function to get subjectivity
def getSubjectivity(text):
    return TextBlob(text).sentiment.subjectivity

# create a function to get polarity
def getPolarity(text):
    return TextBlob(text).sentiment.polarity

# create two columns
df['Subjectivity'] = df['Tweets'].apply(getSubjectivity)
df['Polarity'] = df['Tweets'].apply(getPolarity)

df

# Plot the word cloud
allWords = ' '.join([twts for twts in df['Tweets']])
wordCloud = WordCloud(width = 500, height=300, random_state = 21, max_font_size = 119).generate(allWords)
plt.imshow(wordCloud, interpolation = 'bilinear')
plt.axis('off')
plt.show()

# create a function to compute negative, nutral and negative analysis
def getAnalysis(score):
    if score < 0:
        return 'Negative'
    elif score == 0:
        return 'Neutral'
    else:
        return 'Positive'

df['Analysis'] = df['Polarity'].apply(getAnalysis)

# plot the polarity and subjectivity
plt.figure(figsize=(8,6))
for i in range(0, df.shape[0]):
    plt.scatter(df['Polarity'][i], df['Subjectivity'][i], color='Blue')
    
plt.title('Sentiment Analysis')
plt.xlabel('Polarity')
plt.ylabel('Subjectivity')
plt.show()

# Get percentage of positive tweets
ptweets = df[df.Analysis == 'Positive']
ptweets = ptweets['Tweets']
round((ptweets.shape[0] / df.shape[0]) * 100,1)

# Get percentage of negative tweets
ptweets = df[df.Analysis == 'Negative']
ptweets = ptweets['Tweets']
round((ptweets.shape[0] / df.shape[0]) * 100,1)

# show the value counts
df['Analysis'].value_counts()

#plot and visualize the counts
plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Counts')
df['Analysis'].value_counts().plot(kind='bar')
plt.show()
